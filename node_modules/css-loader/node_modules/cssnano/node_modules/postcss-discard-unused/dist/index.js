'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _uniqs = require('uniqs');

var _uniqs2 = _interopRequireDefault(_uniqs);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _flatten = require('flatten');

var _flatten2 = _interopRequireDefault(_flatten);

var comma = _postcss.list.comma;
var space = _postcss.list.space;

function filterAtRule(css, declRegex, atruleRegex) {
    var atRules = [];
    var values = [];
    css.walk(function (node) {
        if (node.type === 'decl' && declRegex.test(node.prop)) {
            return comma(node.value).forEach(function (val) {
                return values.push(space(val));
            });
        }
        if (node.type === 'atrule' && atruleRegex.test(node.name)) {
            atRules.push(node);
        }
    });
    values = (0, _uniqs2['default'])((0, _flatten2['default'])(values));
    atRules.forEach(function (node) {
        var hasAtRule = values.some(function (value) {
            return value === node.params;
        });
        if (!hasAtRule) {
            node.remove();
        }
    });
};

function hasFont(fontFamily, cache) {
    return comma(fontFamily).some(function (font) {
        return cache.some(function (c) {
            return ~c.indexOf(font);
        });
    });
};

// fonts have slightly different logic
function filterFont(css) {
    var atRules = [];
    var values = [];
    css.walk(function (node) {
        if (node.type === 'decl' && node.parent.type === 'rule' && /font(|-family)/.test(node.prop)) {
            return values.push(comma(node.value));
        }
        if (node.type === 'atrule' && node.name === 'font-face' && node.nodes) {
            atRules.push(node);
        }
    });
    values = (0, _uniqs2['default'])((0, _flatten2['default'])(values));
    atRules.forEach(function (rule) {
        var families = rule.nodes.filter(function (node) {
            return node.prop === 'font-family';
        });
        // Discard the @font-face if it has no font-family
        if (!families.length) {
            return rule.remove();
        }
        families.forEach(function (family) {
            if (!hasFont(family.value, values)) {
                rule.remove();
            }
        });
    });
}

module.exports = _postcss2['default'].plugin('postcss-discard-unused', function (opts) {
    opts = opts || {};
    return function (css) {
        if (opts.fontFace !== false) {
            filterFont(css);
        }
        if (opts.counterStyle !== false) {
            filterAtRule(css, /list-style|system/, /counter-style/);
        }
        if (opts.keyframes !== false) {
            filterAtRule(css, /animation/, /keyframes/);
        }
    };
});