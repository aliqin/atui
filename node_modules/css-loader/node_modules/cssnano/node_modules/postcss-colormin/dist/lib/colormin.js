'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _colrConvert = require('colr-convert');

var _colrConvert2 = _interopRequireDefault(_colrConvert);

var _cssColorNames = require('css-color-names');

var _cssColorNames2 = _interopRequireDefault(_cssColorNames);

var _dropLeadingZero = require('./drop-leading-zero');

var _dropLeadingZero2 = _interopRequireDefault(_dropLeadingZero);

var _hex = require('./hex');

var hexes = {};
var round = Math.round;

Object.keys(_cssColorNames2['default']).forEach(function (keyword) {
    return hexes[_cssColorNames2['default'][keyword]] = keyword;
});

var shorter = function shorter(a, b) {
    return a && a.length < b.length ? a : b;
};

function clamp(max) {
    return function (value) {
        return Math.max(0, Math.min(value, max));
    };
}

function clampRgb(value) {
    return clamp(255)(value);
}

function clampHsl(value, index) {
    if (!index) {
        return clamp(360)(value);
    }
    return index < 4 ? clamp(100)(value) : value;
}

exports['default'] = function (name, args) {
    var word = name.toLowerCase();
    if (word === 'rgb' || word === 'rgba' || word === 'hsl' || word === 'hsla') {
        if (!args) {
            return name;
        }
        if (word[3] === 'a') {
            if (args[1] === 0 && args[2] === 0 && args[3] === 0) {
                if (word === 'hsla' || args[0] === 0) {
                    return 'transparent';
                }
            }
            if (args[3] === 1) {
                word = word.slice(0, 3);
            } else {
                args[3] = (0, _dropLeadingZero2['default'])(args[3]);
            }
        }
        if (word === 'hsl') {
            word = 'rgb';
            args = _colrConvert2['default'].hsl.rgb(args.map(clampHsl));
            args[0] = round(args[0]);
            args[1] = round(args[1]);
            args[2] = round(args[2]);
        }
        if (word === 'rgb') {
            word = _colrConvert2['default'].rgb.hex(args.map(clampRgb));
        } else {
            var rgba = undefined,
                hsla = undefined;
            // alpha conversion
            if (word === 'rgba') {
                rgba = args.slice(0, 3).map(clampRgb).concat(args[3]);
                hsla = _colrConvert2['default'].rgb.hsl(args);
                hsla[0] = round(hsla[0]);
                hsla[1] = round(hsla[1]);
                hsla[2] = round(hsla[2]);
                hsla.push(args[3]);
            } else {
                hsla = args.map(clampHsl);
                rgba = _colrConvert2['default'].hsl.rgb(hsla);
                rgba[0] = round(rgba[0]);
                rgba[1] = round(rgba[1]);
                rgba[2] = round(rgba[2]);
                rgba.push(args[3]);
                hsla[3] = args[3];
            }
            hsla[1] = hsla[1] + '%';
            hsla[2] = hsla[2] + '%';
            return shorter('hsla(' + hsla.join() + ')', 'rgba(' + rgba.join() + ')');
        }
    }

    if ((0, _hex.isHex)(word)) {
        word = (0, _hex.toLonghand)(word);
        if (word in hexes) {
            return shorter(hexes[word], (0, _hex.toShorthand)(word));
        }
        return (0, _hex.toShorthand)(word);
    }

    if (word in _cssColorNames2['default']) {
        return shorter((0, _hex.toShorthand)(_cssColorNames2['default'][word]), word);
    }

    return name;
};

module.exports = exports['default'];