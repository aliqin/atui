'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _postcssValueParser = require('postcss-value-parser');

var _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);

// border: <line-width> || <line-style> || <color>
// outline: <outline-color> || <outline-style> || <outline-width>
var borderProps = ['border', 'border-top', 'border-right', 'border-bottom', 'border-left', 'outline'];

var borderWidths = ['thin', 'medium', 'thick'];

var borderStyles = ['none', 'auto', // only in outline-style
'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset'];

// flex-flow: <flex-direction> || <flex-wrap>
var flexFlowProps = ['flex-flow'];

var flexDirection = ['row', 'row-reverse', 'column', 'column-reverse'];

var flexWrap = ['nowrap ', 'wrap', 'wrap-reverse'];

function normalizeBorder(decl) {
    var order = { width: '', style: '', color: '' };
    var border = (0, _postcssValueParser2['default'])(decl.value);
    if (border.nodes.length > 2) {
        border.walk(function (node) {
            if (node.type === 'word') {
                if (~borderStyles.indexOf(node.value)) {
                    order.style = node.value;
                    return;
                }
                if (~borderWidths.indexOf(node.value) || (0, _postcssValueParser.unit)(node.value)) {
                    order.width = node.value;
                    return;
                }
                order.color = node.value;
                return;
            }
            if (node.type === 'function') {
                if (node.value === 'calc') {
                    order.width = (0, _postcssValueParser.stringify)(node);
                } else {
                    order.color = (0, _postcssValueParser.stringify)(node);
                }
                return false;
            }
        });
        decl.value = (order.width + ' ' + order.style + ' ' + order.color).trim();
    }
};

function normalizeFlexFlow(decl) {
    var order = { direction: '', wrap: '' };
    var flexFlow = (0, _postcssValueParser2['default'])(decl.value);
    if (flexFlow.nodes.length > 2) {
        flexFlow.walk(function (node) {
            if (~flexDirection.indexOf(node.value)) {
                order.direction = node.value;
                return;
            }
            if (~flexWrap.indexOf(node.value)) {
                order.wrap = node.value;
                return;
            }
        });
        decl.value = (order.direction + ' ' + order.wrap).trim();
    }
};

exports['default'] = _postcss2['default'].plugin('postcss-ordered-values', function () {
    return function (css) {
        css.walkDecls(function (decl) {
            if (~borderProps.indexOf(decl.prop)) {
                normalizeBorder(decl);
                return;
            }
            if (~flexFlowProps.indexOf(decl.prop)) {
                normalizeFlexFlow(decl);
                return;
            }
        });
    };
});
module.exports = exports['default'];