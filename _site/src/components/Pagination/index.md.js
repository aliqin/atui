webpackJsonp([63,161],{419:function(t,e){"use strict";t.exports={content:["section",["h2","\u4f55\u65f6\u4f7f\u7528"]],meta:{category:"Components",type:"Navigation",title:"Pagination",subtitle:"\u5206\u9875",cols:1,filename:"src/components/Pagination/index.md"},toc:["ul",["li",["a",{href:"#\u4f55\u65f6\u4f7f\u7528"},"\u4f55\u65f6\u4f7f\u7528"]],["li",["a",{href:"#API"},"API"]]],api:["section",["h2","API"],["h3","Panation"],["table",["thead",["tr",["th","\u5c5e\u6027"],["th","\u8bf4\u660e"],["th","\u7c7b\u578b"],["th","\u9ed8\u8ba4\u503c"]]],["tbody",["tr",["td","pageSize"],["td","\u9875\u7801\u5927\u5c0f"],["td","Number"],["td","10"]],["tr",["td","total"],["td","\u6570\u636e\u603b\u6761\u6570"],["td","Number"],["td"]],["tr",["td","currPage"],["td","\u5f53\u524d\u9875"],["td","Number"],["td","1"]],["tr",["td","showJumper"],["td","\u662f\u5426\u53ef\u8df3\u8f6c\u81ea\u5b9a\u4e49\u9875"],["td","Boolean"],["td","false"]],["tr",["td","showSizeChanger"],["td","\u662f\u5426\u53ef\u6539\u53d8\u9875\u7801\u5927\u5c0f"],["td","Boolean"],["td","false"]],["tr",["td","simple"],["td","\u7b80\u5355\u7248"],["td","Boolean"],["td","false"]],["tr",["td","mini"],["td","\u8ff7\u4f60\u7248"],["td","Boolean"],["td","false"]]]]]}}});
//# sourceMappingURL=data:application/json;base64,