webpackJsonp([65,161],{417:function(n,a){"use strict";n.exports={content:{"zh-CN":[],"en-US":[]},meta:{order:1,title:{"zh-CN":"\u9875\u7801\u6539\u53d8\u4e0e\u8df3\u8f6c\u529f\u80fd","en-US":"Type"},filename:"src/components/Pagination/demo/show-size-changer.md",id:"src-components-Pagination-demo-show-size-changer"},toc:["ul",["li",["a",{href:"#zh-CN"},"zh-CN"]],["li",["a",{href:"#en-US"},"en-US"]]],highlightedCode:["pre",{lang:"jsx",highlighted:'<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>pagination</span> <span class="token attr-name" >:total-page.sync</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>totalPage<span class="token punctuation" >"</span></span> <span class="token attr-name" >:curr-page.sync</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>currPage<span class="token punctuation" >"</span></span> <span class="token attr-name" >:total</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>total<span class="token punctuation" >"</span></span> <span class="token attr-name" >show-jumper</span> <span class="token attr-name" >show-size-changer</span><span class="token punctuation" >></span></span><span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>pagination</span><span class="token punctuation" >></span></span>'}],preview:'<pagination :total-page.sync="totalPage" :curr-page.sync="currPage" :total="total" show-jumper show-size-changer></pagination>',vueScript:"new Vue({\n  el: 'body',\n  components: {\n    pagination: atui.Pagination\n  },\n  data: function() {\n    return {\n      totalPage: 10,\n      currPage: 2,\n      total: 273\n    }\n  }\n})"}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvUGFnaW5hdGlvbi9kZW1vL3Nob3ctc2l6ZS1jaGFuZ2VyLm1kLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1BhZ2luYXRpb24vZGVtby9zaG93LXNpemUtY2hhbmdlci5tZCJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnAiLCI0MTciLCJtb2R1bGUiLCJleHBvcnRzIiwiY29udGVudCIsInpoLUNOIiwiZW4tVVMiLCJtZXRhIiwib3JkZXIiLCJ0aXRsZSIsImZpbGVuYW1lIiwiaWQiLCJ0b2MiLCJocmVmIiwiaGlnaGxpZ2h0ZWRDb2RlIiwibGFuZyIsImhpZ2hsaWdodGVkIiwicHJldmlldyIsInZ1ZVNjcmlwdCJdLCJtYXBwaW5ncyI6IkFBQUFBLGNBQWMsR0FBRyxNQUVYQyxJQUNBLFNBQVNDLEVBQVFDLEdBRXRCLFlDTERELEdBQU9DLFNBQ0xDLFNBQ0VDLFdBQ0FDLFlBRUZDLE1BQ0VDLE1BQVMsRUFDVEMsT0FDRUosUUFBUyx5REFDVEMsUUFBUyxRQUVYSSxTQUFZLHNEQUNaQyxHQUFNLG9EQUVSQyxLQUNFLE1BRUUsTUFFRSxLQUVFQyxLQUFRLFVBRVYsV0FJRixNQUVFLEtBRUVBLEtBQVEsVUFFVixXQUlOQyxpQkFDRSxPQUVFQyxLQUFRLE1BQ1JDLFlBQWUsb2tDQUduQkMsUUFBVyxpSUFDWEMsVUFBYSIsImZpbGUiOiJzcmMvY29tcG9uZW50cy9QYWdpbmF0aW9uL2RlbW8vc2hvdy1zaXplLWNoYW5nZXIubWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ3ZWJwYWNrSnNvbnAoWzY1LDE2MV0se1xuXG4vKioqLyA0MTc6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0ge1xuXHQgIFwiY29udGVudFwiOiB7XG5cdCAgICBcInpoLUNOXCI6IFtdLFxuXHQgICAgXCJlbi1VU1wiOiBbXVxuXHQgIH0sXG5cdCAgXCJtZXRhXCI6IHtcblx0ICAgIFwib3JkZXJcIjogMSxcblx0ICAgIFwidGl0bGVcIjoge1xuXHQgICAgICBcInpoLUNOXCI6IFwi6aG156CB5pS55Y+Y5LiO6Lez6L2s5Yqf6IO9XCIsXG5cdCAgICAgIFwiZW4tVVNcIjogXCJUeXBlXCJcblx0ICAgIH0sXG5cdCAgICBcImZpbGVuYW1lXCI6IFwic3JjL2NvbXBvbmVudHMvUGFnaW5hdGlvbi9kZW1vL3Nob3ctc2l6ZS1jaGFuZ2VyLm1kXCIsXG5cdCAgICBcImlkXCI6IFwic3JjLWNvbXBvbmVudHMtUGFnaW5hdGlvbi1kZW1vLXNob3ctc2l6ZS1jaGFuZ2VyXCJcblx0ICB9LFxuXHQgIFwidG9jXCI6IFtcInVsXCIsIFtcImxpXCIsIFtcImFcIiwge1xuXHQgICAgXCJocmVmXCI6IFwiI3poLUNOXCJcblx0ICB9LCBcInpoLUNOXCJdXSwgW1wibGlcIiwgW1wiYVwiLCB7XG5cdCAgICBcImhyZWZcIjogXCIjZW4tVVNcIlxuXHQgIH0sIFwiZW4tVVNcIl1dXSxcblx0ICBcImhpZ2hsaWdodGVkQ29kZVwiOiBbXCJwcmVcIiwge1xuXHQgICAgXCJsYW5nXCI6IFwianN4XCIsXG5cdCAgICBcImhpZ2hsaWdodGVkXCI6IFwiPHNwYW4gY2xhc3M9XFxcInRva2VuIHRhZ1xcXCIgPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiB0YWdcXFwiID48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiID4mbHQ7PC9zcGFuPnBhZ2luYXRpb248L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBhdHRyLW5hbWVcXFwiID46dG90YWwtcGFnZS5zeW5jPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBhdHRyLXZhbHVlXFxcIiA+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIiA+PTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiID5cXFwiPC9zcGFuPnRvdGFsUGFnZTxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCIgPlxcXCI8L3NwYW4+PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gYXR0ci1uYW1lXFxcIiA+OmN1cnItcGFnZS5zeW5jPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBhdHRyLXZhbHVlXFxcIiA+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIiA+PTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiID5cXFwiPC9zcGFuPmN1cnJQYWdlPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIiA+XFxcIjwvc3Bhbj48L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBhdHRyLW5hbWVcXFwiID46dG90YWw8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIGF0dHItdmFsdWVcXFwiID48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiID49PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCIgPlxcXCI8L3NwYW4+dG90YWw8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiID5cXFwiPC9zcGFuPjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGF0dHItbmFtZVxcXCIgPnNob3ctanVtcGVyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gYXR0ci1uYW1lXFxcIiA+c2hvdy1zaXplLWNoYW5nZXI8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIiA+Pjwvc3Bhbj48L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHRhZ1xcXCIgPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiB0YWdcXFwiID48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiID4mbHQ7Lzwvc3Bhbj5wYWdpbmF0aW9uPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCIgPj48L3NwYW4+PC9zcGFuPlwiXG5cdCAgfV0sXG5cdCAgXCJwcmV2aWV3XCI6IFwiPHBhZ2luYXRpb24gOnRvdGFsLXBhZ2Uuc3luYz1cXFwidG90YWxQYWdlXFxcIiA6Y3Vyci1wYWdlLnN5bmM9XFxcImN1cnJQYWdlXFxcIiA6dG90YWw9XFxcInRvdGFsXFxcIiBzaG93LWp1bXBlciBzaG93LXNpemUtY2hhbmdlcj48L3BhZ2luYXRpb24+XCIsXG5cdCAgXCJ2dWVTY3JpcHRcIjogXCJuZXcgVnVlKHtcXG4gIGVsOiAnYm9keScsXFxuICBjb21wb25lbnRzOiB7XFxuICAgIHBhZ2luYXRpb246IGF0dWkuUGFnaW5hdGlvblxcbiAgfSxcXG4gIGRhdGE6IGZ1bmN0aW9uKCkge1xcbiAgICByZXR1cm4ge1xcbiAgICAgIHRvdGFsUGFnZTogMTAsXFxuICAgICAgY3VyclBhZ2U6IDIsXFxuICAgICAgdG90YWw6IDI3M1xcbiAgICB9XFxuICB9XFxufSlcIlxuXHR9O1xuXG4vKioqLyB9XG5cbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9jb21wb25lbnRzL1BhZ2luYXRpb24vZGVtby9zaG93LXNpemUtY2hhbmdlci5tZC5qc1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcImNvbnRlbnRcIjoge1xuICAgIFwiemgtQ05cIjogW10sXG4gICAgXCJlbi1VU1wiOiBbXVxuICB9LFxuICBcIm1ldGFcIjoge1xuICAgIFwib3JkZXJcIjogMSxcbiAgICBcInRpdGxlXCI6IHtcbiAgICAgIFwiemgtQ05cIjogXCLpobXnoIHmlLnlj5jkuI7ot7Povazlip/og71cIixcbiAgICAgIFwiZW4tVVNcIjogXCJUeXBlXCJcbiAgICB9LFxuICAgIFwiZmlsZW5hbWVcIjogXCJzcmMvY29tcG9uZW50cy9QYWdpbmF0aW9uL2RlbW8vc2hvdy1zaXplLWNoYW5nZXIubWRcIixcbiAgICBcImlkXCI6IFwic3JjLWNvbXBvbmVudHMtUGFnaW5hdGlvbi1kZW1vLXNob3ctc2l6ZS1jaGFuZ2VyXCJcbiAgfSxcbiAgXCJ0b2NcIjogW1xuICAgIFwidWxcIixcbiAgICBbXG4gICAgICBcImxpXCIsXG4gICAgICBbXG4gICAgICAgIFwiYVwiLFxuICAgICAgICB7XG4gICAgICAgICAgXCJocmVmXCI6IFwiI3poLUNOXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ6aC1DTlwiXG4gICAgICBdXG4gICAgXSxcbiAgICBbXG4gICAgICBcImxpXCIsXG4gICAgICBbXG4gICAgICAgIFwiYVwiLFxuICAgICAgICB7XG4gICAgICAgICAgXCJocmVmXCI6IFwiI2VuLVVTXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJlbi1VU1wiXG4gICAgICBdXG4gICAgXVxuICBdLFxuICBcImhpZ2hsaWdodGVkQ29kZVwiOiBbXG4gICAgXCJwcmVcIixcbiAgICB7XG4gICAgICBcImxhbmdcIjogXCJqc3hcIixcbiAgICAgIFwiaGlnaGxpZ2h0ZWRcIjogXCI8c3BhbiBjbGFzcz1cXFwidG9rZW4gdGFnXFxcIiA+PHNwYW4gY2xhc3M9XFxcInRva2VuIHRhZ1xcXCIgPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCIgPiZsdDs8L3NwYW4+cGFnaW5hdGlvbjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGF0dHItbmFtZVxcXCIgPjp0b3RhbC1wYWdlLnN5bmM8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIGF0dHItdmFsdWVcXFwiID48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiID49PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCIgPlxcXCI8L3NwYW4+dG90YWxQYWdlPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIiA+XFxcIjwvc3Bhbj48L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBhdHRyLW5hbWVcXFwiID46Y3Vyci1wYWdlLnN5bmM8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIGF0dHItdmFsdWVcXFwiID48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiID49PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCIgPlxcXCI8L3NwYW4+Y3VyclBhZ2U8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiID5cXFwiPC9zcGFuPjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGF0dHItbmFtZVxcXCIgPjp0b3RhbDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gYXR0ci12YWx1ZVxcXCIgPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCIgPj08L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIiA+XFxcIjwvc3Bhbj50b3RhbDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCIgPlxcXCI8L3NwYW4+PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gYXR0ci1uYW1lXFxcIiA+c2hvdy1qdW1wZXI8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBhdHRyLW5hbWVcXFwiID5zaG93LXNpemUtY2hhbmdlcjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiID4+PC9zcGFuPjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gdGFnXFxcIiA+PHNwYW4gY2xhc3M9XFxcInRva2VuIHRhZ1xcXCIgPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCIgPiZsdDsvPC9zcGFuPnBhZ2luYXRpb248L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIiA+Pjwvc3Bhbj48L3NwYW4+XCJcbiAgICB9XG4gIF0sXG4gIFwicHJldmlld1wiOiBcIjxwYWdpbmF0aW9uIDp0b3RhbC1wYWdlLnN5bmM9XFxcInRvdGFsUGFnZVxcXCIgOmN1cnItcGFnZS5zeW5jPVxcXCJjdXJyUGFnZVxcXCIgOnRvdGFsPVxcXCJ0b3RhbFxcXCIgc2hvdy1qdW1wZXIgc2hvdy1zaXplLWNoYW5nZXI+PC9wYWdpbmF0aW9uPlwiLFxuICBcInZ1ZVNjcmlwdFwiOiBcIm5ldyBWdWUoe1xcbiAgZWw6ICdib2R5JyxcXG4gIGNvbXBvbmVudHM6IHtcXG4gICAgcGFnaW5hdGlvbjogYXR1aS5QYWdpbmF0aW9uXFxuICB9LFxcbiAgZGF0YTogZnVuY3Rpb24oKSB7XFxuICAgIHJldHVybiB7XFxuICAgICAgdG90YWxQYWdlOiAxMCxcXG4gICAgICBjdXJyUGFnZTogMixcXG4gICAgICB0b3RhbDogMjczXFxuICAgIH1cXG4gIH1cXG59KVwiXG59O1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2NvbXBvbmVudHMvUGFnaW5hdGlvbi9kZW1vL3Nob3ctc2l6ZS1jaGFuZ2VyLm1kXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==