webpackJsonp([18,161],{464:function(e,n){"use strict";e.exports={content:{"zh-CN":[],"en-US":[]},meta:{order:0,title:{"zh-CN":"\u7981\u7528\u90e8\u5206\u65f6\u95f4","en-US":"Type"},filename:"src/components/TimePicker/demo/disabled-range.md",id:"src-components-TimePicker-demo-disabled-range"},toc:["ul",["li",["a",{href:"#zh-CN"},"zh-CN"]],["li",["a",{href:"#en-US"},"en-US"]]],highlightedCode:["pre",{lang:"jsx",highlighted:'<span class="token operator" >&lt;</span>time<span class="token operator" >-</span>picker @change<span class="token operator" >=</span><span class="token string" >"timePickerChange"</span> <span class="token punctuation" >:</span>disabled<span class="token operator" >-</span>minutes<span class="token operator" >=</span><span class="token string" >"disabledMinutes"</span> <span class="token punctuation" >:</span>disabled<span class="token operator" >-</span>seconds<span class="token operator" >=</span><span class="token string" >"disabledSeconds"</span><span class="token operator" >></span><span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>time-picker</span><span class="token punctuation" >></span></span>'}],preview:'<time-picker @change="timePickerChange" :disabled-minutes="disabledMinutes" :disabled-seconds="disabledSeconds"></time-picker>',vueScript:"new Vue({\n    el: 'body',\n    components: {\n      timePicker: atui.TimePicker\n    },\n    methods: {\n      disabledMinutes: function() {\n          return [...Array(60).keys()].filter(value => value % 10 !== 0)\n      },\n      disabledSeconds: function() {\n          return [...Array(60).keys()].filter(value => value % 30 !== 0)\n      },\n      timePickerChange: function(date,timeString) {\n          console.log('timepicker',date, timeString)\n      }\n    }\n})"}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvVGltZVBpY2tlci9kZW1vL2Rpc2FibGVkLXJhbmdlLm1kLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RpbWVQaWNrZXIvZGVtby9kaXNhYmxlZC1yYW5nZS5tZCJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnAiLCI0NjQiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29udGVudCIsInpoLUNOIiwiZW4tVVMiLCJtZXRhIiwib3JkZXIiLCJ0aXRsZSIsImZpbGVuYW1lIiwiaWQiLCJ0b2MiLCJocmVmIiwiaGlnaGxpZ2h0ZWRDb2RlIiwibGFuZyIsImhpZ2hsaWdodGVkIiwicHJldmlldyIsInZ1ZVNjcmlwdCJdLCJtYXBwaW5ncyI6IkFBQUFBLGNBQWMsR0FBRyxNQUVYQyxJQUNBLFNBQVNDLEVBQVFDLEdBRXRCLFlDTERELEdBQU9DLFNBQ0xDLFNBQ0VDLFdBQ0FDLFlBRUZDLE1BQ0VDLE1BQVMsRUFDVEMsT0FDRUosUUFBUyx1Q0FDVEMsUUFBUyxRQUVYSSxTQUFZLG1EQUNaQyxHQUFNLGlEQUVSQyxLQUNFLE1BRUUsTUFFRSxLQUVFQyxLQUFRLFVBRVYsV0FJRixNQUVFLEtBRUVBLEtBQVEsVUFFVixXQUlOQyxpQkFDRSxPQUVFQyxLQUFRLE1BQ1JDLFlBQWUsMHZCQUduQkMsUUFBVyxpSUFDWEMsVUFBYSIsImZpbGUiOiJzcmMvY29tcG9uZW50cy9UaW1lUGlja2VyL2RlbW8vZGlzYWJsZWQtcmFuZ2UubWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ3ZWJwYWNrSnNvbnAoWzE4LDE2MV0se1xuXG4vKioqLyA0NjQ6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0ge1xuXHQgIFwiY29udGVudFwiOiB7XG5cdCAgICBcInpoLUNOXCI6IFtdLFxuXHQgICAgXCJlbi1VU1wiOiBbXVxuXHQgIH0sXG5cdCAgXCJtZXRhXCI6IHtcblx0ICAgIFwib3JkZXJcIjogMCxcblx0ICAgIFwidGl0bGVcIjoge1xuXHQgICAgICBcInpoLUNOXCI6IFwi56aB55So6YOo5YiG5pe26Ze0XCIsXG5cdCAgICAgIFwiZW4tVVNcIjogXCJUeXBlXCJcblx0ICAgIH0sXG5cdCAgICBcImZpbGVuYW1lXCI6IFwic3JjL2NvbXBvbmVudHMvVGltZVBpY2tlci9kZW1vL2Rpc2FibGVkLXJhbmdlLm1kXCIsXG5cdCAgICBcImlkXCI6IFwic3JjLWNvbXBvbmVudHMtVGltZVBpY2tlci1kZW1vLWRpc2FibGVkLXJhbmdlXCJcblx0ICB9LFxuXHQgIFwidG9jXCI6IFtcInVsXCIsIFtcImxpXCIsIFtcImFcIiwge1xuXHQgICAgXCJocmVmXCI6IFwiI3poLUNOXCJcblx0ICB9LCBcInpoLUNOXCJdXSwgW1wibGlcIiwgW1wiYVwiLCB7XG5cdCAgICBcImhyZWZcIjogXCIjZW4tVVNcIlxuXHQgIH0sIFwiZW4tVVNcIl1dXSxcblx0ICBcImhpZ2hsaWdodGVkQ29kZVwiOiBbXCJwcmVcIiwge1xuXHQgICAgXCJsYW5nXCI6IFwianN4XCIsXG5cdCAgICBcImhpZ2hsaWdodGVkXCI6IFwiPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIiA+Jmx0Ozwvc3Bhbj50aW1lPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIiA+LTwvc3Bhbj5waWNrZXIgQGNoYW5nZTxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCIgPj08L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHN0cmluZ1xcXCIgPlxcXCJ0aW1lUGlja2VyQ2hhbmdlXFxcIjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIiA+Ojwvc3Bhbj5kaXNhYmxlZDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCIgPi08L3NwYW4+bWludXRlczxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCIgPj08L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHN0cmluZ1xcXCIgPlxcXCJkaXNhYmxlZE1pbnV0ZXNcXFwiPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiID46PC9zcGFuPmRpc2FibGVkPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIiA+LTwvc3Bhbj5zZWNvbmRzPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIiA+PTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gc3RyaW5nXFxcIiA+XFxcImRpc2FibGVkU2Vjb25kc1xcXCI8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIiA+Pjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gdGFnXFxcIiA+PHNwYW4gY2xhc3M9XFxcInRva2VuIHRhZ1xcXCIgPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCIgPiZsdDsvPC9zcGFuPnRpbWUtcGlja2VyPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCIgPj48L3NwYW4+PC9zcGFuPlwiXG5cdCAgfV0sXG5cdCAgXCJwcmV2aWV3XCI6IFwiPHRpbWUtcGlja2VyIEBjaGFuZ2U9XFxcInRpbWVQaWNrZXJDaGFuZ2VcXFwiIDpkaXNhYmxlZC1taW51dGVzPVxcXCJkaXNhYmxlZE1pbnV0ZXNcXFwiIDpkaXNhYmxlZC1zZWNvbmRzPVxcXCJkaXNhYmxlZFNlY29uZHNcXFwiPjwvdGltZS1waWNrZXI+XCIsXG5cdCAgXCJ2dWVTY3JpcHRcIjogXCJuZXcgVnVlKHtcXG4gICAgZWw6ICdib2R5JyxcXG4gICAgY29tcG9uZW50czoge1xcbiAgICAgIHRpbWVQaWNrZXI6IGF0dWkuVGltZVBpY2tlclxcbiAgICB9LFxcbiAgICBtZXRob2RzOiB7XFxuICAgICAgZGlzYWJsZWRNaW51dGVzOiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgcmV0dXJuIFsuLi5BcnJheSg2MCkua2V5cygpXS5maWx0ZXIodmFsdWUgPT4gdmFsdWUgJSAxMCAhPT0gMClcXG4gICAgICB9LFxcbiAgICAgIGRpc2FibGVkU2Vjb25kczogZnVuY3Rpb24oKSB7XFxuICAgICAgICAgIHJldHVybiBbLi4uQXJyYXkoNjApLmtleXMoKV0uZmlsdGVyKHZhbHVlID0+IHZhbHVlICUgMzAgIT09IDApXFxuICAgICAgfSxcXG4gICAgICB0aW1lUGlja2VyQ2hhbmdlOiBmdW5jdGlvbihkYXRlLHRpbWVTdHJpbmcpIHtcXG4gICAgICAgICAgY29uc29sZS5sb2coJ3RpbWVwaWNrZXInLGRhdGUsIHRpbWVTdHJpbmcpXFxuICAgICAgfVxcbiAgICB9XFxufSlcIlxuXHR9O1xuXG4vKioqLyB9XG5cbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9jb21wb25lbnRzL1RpbWVQaWNrZXIvZGVtby9kaXNhYmxlZC1yYW5nZS5tZC5qc1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcImNvbnRlbnRcIjoge1xuICAgIFwiemgtQ05cIjogW10sXG4gICAgXCJlbi1VU1wiOiBbXVxuICB9LFxuICBcIm1ldGFcIjoge1xuICAgIFwib3JkZXJcIjogMCxcbiAgICBcInRpdGxlXCI6IHtcbiAgICAgIFwiemgtQ05cIjogXCLnpoHnlKjpg6jliIbml7bpl7RcIixcbiAgICAgIFwiZW4tVVNcIjogXCJUeXBlXCJcbiAgICB9LFxuICAgIFwiZmlsZW5hbWVcIjogXCJzcmMvY29tcG9uZW50cy9UaW1lUGlja2VyL2RlbW8vZGlzYWJsZWQtcmFuZ2UubWRcIixcbiAgICBcImlkXCI6IFwic3JjLWNvbXBvbmVudHMtVGltZVBpY2tlci1kZW1vLWRpc2FibGVkLXJhbmdlXCJcbiAgfSxcbiAgXCJ0b2NcIjogW1xuICAgIFwidWxcIixcbiAgICBbXG4gICAgICBcImxpXCIsXG4gICAgICBbXG4gICAgICAgIFwiYVwiLFxuICAgICAgICB7XG4gICAgICAgICAgXCJocmVmXCI6IFwiI3poLUNOXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ6aC1DTlwiXG4gICAgICBdXG4gICAgXSxcbiAgICBbXG4gICAgICBcImxpXCIsXG4gICAgICBbXG4gICAgICAgIFwiYVwiLFxuICAgICAgICB7XG4gICAgICAgICAgXCJocmVmXCI6IFwiI2VuLVVTXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJlbi1VU1wiXG4gICAgICBdXG4gICAgXVxuICBdLFxuICBcImhpZ2hsaWdodGVkQ29kZVwiOiBbXG4gICAgXCJwcmVcIixcbiAgICB7XG4gICAgICBcImxhbmdcIjogXCJqc3hcIixcbiAgICAgIFwiaGlnaGxpZ2h0ZWRcIjogXCI8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiID4mbHQ7PC9zcGFuPnRpbWU8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiID4tPC9zcGFuPnBpY2tlciBAY2hhbmdlPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIiA+PTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gc3RyaW5nXFxcIiA+XFxcInRpbWVQaWNrZXJDaGFuZ2VcXFwiPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiID46PC9zcGFuPmRpc2FibGVkPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIiA+LTwvc3Bhbj5taW51dGVzPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIiA+PTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gc3RyaW5nXFxcIiA+XFxcImRpc2FibGVkTWludXRlc1xcXCI8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCIgPjo8L3NwYW4+ZGlzYWJsZWQ8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiID4tPC9zcGFuPnNlY29uZHM8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiID49PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBzdHJpbmdcXFwiID5cXFwiZGlzYWJsZWRTZWNvbmRzXFxcIjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiID4+PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiB0YWdcXFwiID48c3BhbiBjbGFzcz1cXFwidG9rZW4gdGFnXFxcIiA+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIiA+Jmx0Oy88L3NwYW4+dGltZS1waWNrZXI8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIiA+Pjwvc3Bhbj48L3NwYW4+XCJcbiAgICB9XG4gIF0sXG4gIFwicHJldmlld1wiOiBcIjx0aW1lLXBpY2tlciBAY2hhbmdlPVxcXCJ0aW1lUGlja2VyQ2hhbmdlXFxcIiA6ZGlzYWJsZWQtbWludXRlcz1cXFwiZGlzYWJsZWRNaW51dGVzXFxcIiA6ZGlzYWJsZWQtc2Vjb25kcz1cXFwiZGlzYWJsZWRTZWNvbmRzXFxcIj48L3RpbWUtcGlja2VyPlwiLFxuICBcInZ1ZVNjcmlwdFwiOiBcIm5ldyBWdWUoe1xcbiAgICBlbDogJ2JvZHknLFxcbiAgICBjb21wb25lbnRzOiB7XFxuICAgICAgdGltZVBpY2tlcjogYXR1aS5UaW1lUGlja2VyXFxuICAgIH0sXFxuICAgIG1ldGhvZHM6IHtcXG4gICAgICBkaXNhYmxlZE1pbnV0ZXM6IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICByZXR1cm4gWy4uLkFycmF5KDYwKS5rZXlzKCldLmZpbHRlcih2YWx1ZSA9PiB2YWx1ZSAlIDEwICE9PSAwKVxcbiAgICAgIH0sXFxuICAgICAgZGlzYWJsZWRTZWNvbmRzOiBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgcmV0dXJuIFsuLi5BcnJheSg2MCkua2V5cygpXS5maWx0ZXIodmFsdWUgPT4gdmFsdWUgJSAzMCAhPT0gMClcXG4gICAgICB9LFxcbiAgICAgIHRpbWVQaWNrZXJDaGFuZ2U6IGZ1bmN0aW9uKGRhdGUsdGltZVN0cmluZykge1xcbiAgICAgICAgICBjb25zb2xlLmxvZygndGltZXBpY2tlcicsZGF0ZSwgdGltZVN0cmluZylcXG4gICAgICB9XFxuICAgIH1cXG59KVwiXG59O1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2NvbXBvbmVudHMvVGltZVBpY2tlci9kZW1vL2Rpc2FibGVkLXJhbmdlLm1kXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==