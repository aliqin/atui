webpackJsonp([46,163],{438:function(t,e){"use strict";t.exports={content:["section",["h2","\u4f55\u65f6\u4f7f\u7528"]],meta:{category:"Components",type:"Other",title:"Spin",subtitle:"\u52a0\u8f7d\u4e2d",filename:"src/components/Spin/index.md"},toc:["ul",["li",["a",{href:"#\u4f55\u65f6\u4f7f\u7528"},"\u4f55\u65f6\u4f7f\u7528"]],["li",["a",{href:"#API"},"API"]]],api:["section",["h2","API"],["table",["thead",["tr",["th","\u5c5e\u6027"],["th","\u8bf4\u660e"],["th","\u7c7b\u578b"],["th","\u9ed8\u8ba4\u503c"]]],["tbody",["tr",["td","size"],["td","\u5927\u5c0f"],["td","string"],["td","default"]],["tr",["td","show"],["td","\u662f\u5426\u663e\u793a"],["td","boolean"],["td","false"]],["tr",["td","tip"],["td","\u63d0\u793a\u6587\u5b57\uff0c\u5728\u4e0d\u652f\u6301animation\u7684\u65f6\u5019\u624d\u4f1a\u663e\u793a"],["td","string"],["td","\u52a0\u8f7d\u4e2d..."]],["tr",["td","sping"],["td","\u662f\u5426\u52a0\u8f7d\u4e2d\uff0c\u53ea\u6709\u5728\u5305\u88f9\u5143\u7d20\u65f6\u624d\u53ef\u80fd\u7528\u5230"],["td","boolean"],["td","false"]]]]]}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvU3Bpbi9pbmRleC5tZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TcGluL2luZGV4Lm1kIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucCIsIjQzOCIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb250ZW50IiwibWV0YSIsImNhdGVnb3J5IiwidHlwZSIsInRpdGxlIiwic3VidGl0bGUiLCJmaWxlbmFtZSIsInRvYyIsImhyZWYiLCJhcGkiXSwibWFwcGluZ3MiOiJBQUFBQSxjQUFjLEdBQUcsTUFFWEMsSUFDQSxTQUFTQyxFQUFRQyxHQUV0QixZQ0xERCxHQUFPQyxTQUNMQyxTQUNFLFdBRUUsS0FDQSw2QkFHSkMsTUFDRUMsU0FBWSxhQUNaQyxLQUFRLFFBQ1JDLE1BQVMsT0FDVEMsU0FBWSxxQkFDWkMsU0FBWSxnQ0FFZEMsS0FDRSxNQUVFLE1BRUUsS0FFRUMsS0FBUSw2QkFFViw4QkFJRixNQUVFLEtBRUVBLEtBQVEsUUFFVixTQUlOQyxLQUNFLFdBRUUsS0FDQSxRQUdBLFNBRUUsU0FFRSxNQUVFLEtBQ0EsaUJBR0EsS0FDQSxpQkFHQSxLQUNBLGlCQUdBLEtBQ0EseUJBS0osU0FFRSxNQUVFLEtBQ0EsU0FHQSxLQUNBLGlCQUdBLEtBQ0EsV0FHQSxLQUNBLGFBSUYsTUFFRSxLQUNBLFNBR0EsS0FDQSw2QkFHQSxLQUNBLFlBR0EsS0FDQSxXQUlGLE1BRUUsS0FDQSxRQUdBLEtBQ0EsOEdBR0EsS0FDQSxXQUdBLEtBQ0EsMkJBSUYsTUFFRSxLQUNBLFVBR0EsS0FDQSx1SEFHQSxLQUNBLFlBR0EsS0FDQSIsImZpbGUiOiJzcmMvY29tcG9uZW50cy9TcGluL2luZGV4Lm1kLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2VicGFja0pzb25wKFs0NiwxNjNdLHtcblxuLyoqKi8gNDM4OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IHtcblx0ICBcImNvbnRlbnRcIjogW1wic2VjdGlvblwiLCBbXCJoMlwiLCBcIuS9leaXtuS9v+eUqFwiXV0sXG5cdCAgXCJtZXRhXCI6IHtcblx0ICAgIFwiY2F0ZWdvcnlcIjogXCJDb21wb25lbnRzXCIsXG5cdCAgICBcInR5cGVcIjogXCJPdGhlclwiLFxuXHQgICAgXCJ0aXRsZVwiOiBcIlNwaW5cIixcblx0ICAgIFwic3VidGl0bGVcIjogXCLliqDovb3kuK1cIixcblx0ICAgIFwiZmlsZW5hbWVcIjogXCJzcmMvY29tcG9uZW50cy9TcGluL2luZGV4Lm1kXCJcblx0ICB9LFxuXHQgIFwidG9jXCI6IFtcInVsXCIsIFtcImxpXCIsIFtcImFcIiwge1xuXHQgICAgXCJocmVmXCI6IFwiI+S9leaXtuS9v+eUqFwiXG5cdCAgfSwgXCLkvZXml7bkvb/nlKhcIl1dLCBbXCJsaVwiLCBbXCJhXCIsIHtcblx0ICAgIFwiaHJlZlwiOiBcIiNBUElcIlxuXHQgIH0sIFwiQVBJXCJdXV0sXG5cdCAgXCJhcGlcIjogW1wic2VjdGlvblwiLCBbXCJoMlwiLCBcIkFQSVwiXSwgW1widGFibGVcIiwgW1widGhlYWRcIiwgW1widHJcIiwgW1widGhcIiwgXCLlsZ7mgKdcIl0sIFtcInRoXCIsIFwi6K+05piOXCJdLCBbXCJ0aFwiLCBcIuexu+Wei1wiXSwgW1widGhcIiwgXCLpu5jorqTlgLxcIl1dXSwgW1widGJvZHlcIiwgW1widHJcIiwgW1widGRcIiwgXCJzaXplXCJdLCBbXCJ0ZFwiLCBcIuWkp+Wwj1wiXSwgW1widGRcIiwgXCJzdHJpbmdcIl0sIFtcInRkXCIsIFwiZGVmYXVsdFwiXV0sIFtcInRyXCIsIFtcInRkXCIsIFwic2hvd1wiXSwgW1widGRcIiwgXCLmmK/lkKbmmL7npLpcIl0sIFtcInRkXCIsIFwiYm9vbGVhblwiXSwgW1widGRcIiwgXCJmYWxzZVwiXV0sIFtcInRyXCIsIFtcInRkXCIsIFwidGlwXCJdLCBbXCJ0ZFwiLCBcIuaPkOekuuaWh+Wtl++8jOWcqOS4jeaUr+aMgWFuaW1hdGlvbueahOaXtuWAmeaJjeS8muaYvuekulwiXSwgW1widGRcIiwgXCJzdHJpbmdcIl0sIFtcInRkXCIsIFwi5Yqg6L295LitLi4uXCJdXSwgW1widHJcIiwgW1widGRcIiwgXCJzcGluZ1wiXSwgW1widGRcIiwgXCLmmK/lkKbliqDovb3kuK3vvIzlj6rmnInlnKjljIXoo7nlhYPntKDml7bmiY3lj6/og73nlKjliLBcIl0sIFtcInRkXCIsIFwiYm9vbGVhblwiXSwgW1widGRcIiwgXCJmYWxzZVwiXV1dXV1cblx0fTtcblxuLyoqKi8gfVxuXG59KTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvY29tcG9uZW50cy9TcGluL2luZGV4Lm1kLmpzXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwiY29udGVudFwiOiBbXG4gICAgXCJzZWN0aW9uXCIsXG4gICAgW1xuICAgICAgXCJoMlwiLFxuICAgICAgXCLkvZXml7bkvb/nlKhcIlxuICAgIF1cbiAgXSxcbiAgXCJtZXRhXCI6IHtcbiAgICBcImNhdGVnb3J5XCI6IFwiQ29tcG9uZW50c1wiLFxuICAgIFwidHlwZVwiOiBcIk90aGVyXCIsXG4gICAgXCJ0aXRsZVwiOiBcIlNwaW5cIixcbiAgICBcInN1YnRpdGxlXCI6IFwi5Yqg6L295LitXCIsXG4gICAgXCJmaWxlbmFtZVwiOiBcInNyYy9jb21wb25lbnRzL1NwaW4vaW5kZXgubWRcIlxuICB9LFxuICBcInRvY1wiOiBbXG4gICAgXCJ1bFwiLFxuICAgIFtcbiAgICAgIFwibGlcIixcbiAgICAgIFtcbiAgICAgICAgXCJhXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBcImhyZWZcIjogXCIj5L2V5pe25L2/55SoXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCLkvZXml7bkvb/nlKhcIlxuICAgICAgXVxuICAgIF0sXG4gICAgW1xuICAgICAgXCJsaVwiLFxuICAgICAgW1xuICAgICAgICBcImFcIixcbiAgICAgICAge1xuICAgICAgICAgIFwiaHJlZlwiOiBcIiNBUElcIlxuICAgICAgICB9LFxuICAgICAgICBcIkFQSVwiXG4gICAgICBdXG4gICAgXVxuICBdLFxuICBcImFwaVwiOiBbXG4gICAgXCJzZWN0aW9uXCIsXG4gICAgW1xuICAgICAgXCJoMlwiLFxuICAgICAgXCJBUElcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJ0YWJsZVwiLFxuICAgICAgW1xuICAgICAgICBcInRoZWFkXCIsXG4gICAgICAgIFtcbiAgICAgICAgICBcInRyXCIsXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0aFwiLFxuICAgICAgICAgICAgXCLlsZ7mgKdcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0aFwiLFxuICAgICAgICAgICAgXCLor7TmmI5cIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0aFwiLFxuICAgICAgICAgICAgXCLnsbvlnotcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0aFwiLFxuICAgICAgICAgICAgXCLpu5jorqTlgLxcIlxuICAgICAgICAgIF1cbiAgICAgICAgXVxuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgXCJ0Ym9keVwiLFxuICAgICAgICBbXG4gICAgICAgICAgXCJ0clwiLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgIFwic2l6ZVwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcIuWkp+Wwj1wiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcInN0cmluZ1wiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRcIlxuICAgICAgICAgIF1cbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgIFwidHJcIixcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcInNob3dcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgXCLmmK/lkKbmmL7npLpcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgXCJib29sZWFuXCJcbiAgICAgICAgICBdLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgIFwiZmFsc2VcIlxuICAgICAgICAgIF1cbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgIFwidHJcIixcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcInRpcFwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcIuaPkOekuuaWh+Wtl++8jOWcqOS4jeaUr+aMgWFuaW1hdGlvbueahOaXtuWAmeaJjeS8muaYvuekulwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcInN0cmluZ1wiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcIuWKoOi9veS4rS4uLlwiXG4gICAgICAgICAgXVxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgXCJ0clwiLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgIFwic3BpbmdcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgXCLmmK/lkKbliqDovb3kuK3vvIzlj6rmnInlnKjljIXoo7nlhYPntKDml7bmiY3lj6/og73nlKjliLBcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgXCJib29sZWFuXCJcbiAgICAgICAgICBdLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgIFwiZmFsc2VcIlxuICAgICAgICAgIF1cbiAgICAgICAgXVxuICAgICAgXVxuICAgIF1cbiAgXVxufTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9jb21wb25lbnRzL1NwaW4vaW5kZXgubWRcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9