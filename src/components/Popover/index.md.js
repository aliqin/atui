webpackJsonp([60,163],{424:function(t,e){"use strict";t.exports={content:["section",["h2","\u4f55\u65f6\u4f7f\u7528"]],meta:{category:"Components",type:"Views",title:"Popover",subtitle:"\u6c14\u6ce1\u5361\u7247",filename:"src/components/Popover/index.md"},toc:["ul",["li",["a",{href:"#\u4f55\u65f6\u4f7f\u7528"},"\u4f55\u65f6\u4f7f\u7528"]],["li",["a",{href:"#API"},"API"]]],api:["section",["h2","API"],["p","\u6309\u94ae\u7684\u5c5e\u6027\u8bf4\u660e\u5982\u4e0b\uff1a"],["table",["thead",["tr",["th","\u5c5e\u6027"],["th","\u8bf4\u660e"],["th","\u7c7b\u578b"],["th","\u9ed8\u8ba4\u503c"]]],["tbody",["tr",["td","trigger"],["td","\u89e6\u53d1\u4e8b\u4ef6"],["td","String"],["td","click"]],["tr",["td","placement"],["td","\u6c7d\u6ce1\u4f4d\u7f6e"],["td","String"],["td","\u53c2\u8003Trigger\u7ec4\u4ef6"]],["tr",["td","title"],["td","\u6807\u9898"],["td","String"],["td"]],["tr",["td","content"],["td","\u5185\u5bb9"],["td","String"],["td"]],["tr",["td","showHeader"],["td","\u662f\u5426\u663e\u793a\u6807\u9898"],["td","Boolean"],["td","true"]],["tr",["td","alwaysShow"],["td","\u662f\u5426\u4e00\u76f4\u663e\u793a"],["td","Boolean"],["td","false"]]]]]}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvUG9wb3Zlci9pbmRleC5tZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Qb3BvdmVyL2luZGV4Lm1kIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucCIsIjQyNCIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb250ZW50IiwibWV0YSIsImNhdGVnb3J5IiwidHlwZSIsInRpdGxlIiwic3VidGl0bGUiLCJmaWxlbmFtZSIsInRvYyIsImhyZWYiLCJhcGkiXSwibWFwcGluZ3MiOiJBQUFBQSxjQUFjLEdBQUcsTUFFWEMsSUFDQSxTQUFTQyxFQUFRQyxHQUV0QixZQ0xERCxHQUFPQyxTQUNMQyxTQUNFLFdBRUUsS0FDQSw2QkFHSkMsTUFDRUMsU0FBWSxhQUNaQyxLQUFRLFFBQ1JDLE1BQVMsVUFDVEMsU0FBWSwyQkFDWkMsU0FBWSxtQ0FFZEMsS0FDRSxNQUVFLE1BRUUsS0FFRUMsS0FBUSw2QkFFViw4QkFJRixNQUVFLEtBRUVBLEtBQVEsUUFFVixTQUlOQyxLQUNFLFdBRUUsS0FDQSxRQUdBLElBQ0EsaUVBR0EsU0FFRSxTQUVFLE1BRUUsS0FDQSxpQkFHQSxLQUNBLGlCQUdBLEtBQ0EsaUJBR0EsS0FDQSx5QkFLSixTQUVFLE1BRUUsS0FDQSxZQUdBLEtBQ0EsNkJBR0EsS0FDQSxXQUdBLEtBQ0EsV0FJRixNQUVFLEtBQ0EsY0FHQSxLQUNBLDZCQUdBLEtBQ0EsV0FHQSxLQUNBLHFDQUlGLE1BRUUsS0FDQSxVQUdBLEtBQ0EsaUJBR0EsS0FDQSxXQUdBLFFBSUYsTUFFRSxLQUNBLFlBR0EsS0FDQSxpQkFHQSxLQUNBLFdBR0EsUUFJRixNQUVFLEtBQ0EsZUFHQSxLQUNBLHlDQUdBLEtBQ0EsWUFHQSxLQUNBLFVBSUYsTUFFRSxLQUNBLGVBR0EsS0FDQSx5Q0FHQSxLQUNBLFlBR0EsS0FDQSIsImZpbGUiOiJzcmMvY29tcG9uZW50cy9Qb3BvdmVyL2luZGV4Lm1kLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2VicGFja0pzb25wKFs2MCwxNjNdLHtcblxuLyoqKi8gNDI0OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IHtcblx0ICBcImNvbnRlbnRcIjogW1wic2VjdGlvblwiLCBbXCJoMlwiLCBcIuS9leaXtuS9v+eUqFwiXV0sXG5cdCAgXCJtZXRhXCI6IHtcblx0ICAgIFwiY2F0ZWdvcnlcIjogXCJDb21wb25lbnRzXCIsXG5cdCAgICBcInR5cGVcIjogXCJWaWV3c1wiLFxuXHQgICAgXCJ0aXRsZVwiOiBcIlBvcG92ZXJcIixcblx0ICAgIFwic3VidGl0bGVcIjogXCLmsJTms6HljaHniYdcIixcblx0ICAgIFwiZmlsZW5hbWVcIjogXCJzcmMvY29tcG9uZW50cy9Qb3BvdmVyL2luZGV4Lm1kXCJcblx0ICB9LFxuXHQgIFwidG9jXCI6IFtcInVsXCIsIFtcImxpXCIsIFtcImFcIiwge1xuXHQgICAgXCJocmVmXCI6IFwiI+S9leaXtuS9v+eUqFwiXG5cdCAgfSwgXCLkvZXml7bkvb/nlKhcIl1dLCBbXCJsaVwiLCBbXCJhXCIsIHtcblx0ICAgIFwiaHJlZlwiOiBcIiNBUElcIlxuXHQgIH0sIFwiQVBJXCJdXV0sXG5cdCAgXCJhcGlcIjogW1wic2VjdGlvblwiLCBbXCJoMlwiLCBcIkFQSVwiXSwgW1wicFwiLCBcIuaMiemSrueahOWxnuaAp+ivtOaYjuWmguS4i++8mlwiXSwgW1widGFibGVcIiwgW1widGhlYWRcIiwgW1widHJcIiwgW1widGhcIiwgXCLlsZ7mgKdcIl0sIFtcInRoXCIsIFwi6K+05piOXCJdLCBbXCJ0aFwiLCBcIuexu+Wei1wiXSwgW1widGhcIiwgXCLpu5jorqTlgLxcIl1dXSwgW1widGJvZHlcIiwgW1widHJcIiwgW1widGRcIiwgXCJ0cmlnZ2VyXCJdLCBbXCJ0ZFwiLCBcIuinpuWPkeS6i+S7tlwiXSwgW1widGRcIiwgXCJTdHJpbmdcIl0sIFtcInRkXCIsIFwiY2xpY2tcIl1dLCBbXCJ0clwiLCBbXCJ0ZFwiLCBcInBsYWNlbWVudFwiXSwgW1widGRcIiwgXCLmsb3ms6HkvY3nva5cIl0sIFtcInRkXCIsIFwiU3RyaW5nXCJdLCBbXCJ0ZFwiLCBcIuWPguiAg1RyaWdnZXLnu4Tku7ZcIl1dLCBbXCJ0clwiLCBbXCJ0ZFwiLCBcInRpdGxlXCJdLCBbXCJ0ZFwiLCBcIuagh+mimFwiXSwgW1widGRcIiwgXCJTdHJpbmdcIl0sIFtcInRkXCJdXSwgW1widHJcIiwgW1widGRcIiwgXCJjb250ZW50XCJdLCBbXCJ0ZFwiLCBcIuWGheWuuVwiXSwgW1widGRcIiwgXCJTdHJpbmdcIl0sIFtcInRkXCJdXSwgW1widHJcIiwgW1widGRcIiwgXCJzaG93SGVhZGVyXCJdLCBbXCJ0ZFwiLCBcIuaYr+WQpuaYvuekuuagh+mimFwiXSwgW1widGRcIiwgXCJCb29sZWFuXCJdLCBbXCJ0ZFwiLCBcInRydWVcIl1dLCBbXCJ0clwiLCBbXCJ0ZFwiLCBcImFsd2F5c1Nob3dcIl0sIFtcInRkXCIsIFwi5piv5ZCm5LiA55u05pi+56S6XCJdLCBbXCJ0ZFwiLCBcIkJvb2xlYW5cIl0sIFtcInRkXCIsIFwiZmFsc2VcIl1dXV1dXG5cdH07XG5cbi8qKiovIH1cblxufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL2NvbXBvbmVudHMvUG9wb3Zlci9pbmRleC5tZC5qc1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcImNvbnRlbnRcIjogW1xuICAgIFwic2VjdGlvblwiLFxuICAgIFtcbiAgICAgIFwiaDJcIixcbiAgICAgIFwi5L2V5pe25L2/55SoXCJcbiAgICBdXG4gIF0sXG4gIFwibWV0YVwiOiB7XG4gICAgXCJjYXRlZ29yeVwiOiBcIkNvbXBvbmVudHNcIixcbiAgICBcInR5cGVcIjogXCJWaWV3c1wiLFxuICAgIFwidGl0bGVcIjogXCJQb3BvdmVyXCIsXG4gICAgXCJzdWJ0aXRsZVwiOiBcIuawlOazoeWNoeeJh1wiLFxuICAgIFwiZmlsZW5hbWVcIjogXCJzcmMvY29tcG9uZW50cy9Qb3BvdmVyL2luZGV4Lm1kXCJcbiAgfSxcbiAgXCJ0b2NcIjogW1xuICAgIFwidWxcIixcbiAgICBbXG4gICAgICBcImxpXCIsXG4gICAgICBbXG4gICAgICAgIFwiYVwiLFxuICAgICAgICB7XG4gICAgICAgICAgXCJocmVmXCI6IFwiI+S9leaXtuS9v+eUqFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwi5L2V5pe25L2/55SoXCJcbiAgICAgIF1cbiAgICBdLFxuICAgIFtcbiAgICAgIFwibGlcIixcbiAgICAgIFtcbiAgICAgICAgXCJhXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBcImhyZWZcIjogXCIjQVBJXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJBUElcIlxuICAgICAgXVxuICAgIF1cbiAgXSxcbiAgXCJhcGlcIjogW1xuICAgIFwic2VjdGlvblwiLFxuICAgIFtcbiAgICAgIFwiaDJcIixcbiAgICAgIFwiQVBJXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwicFwiLFxuICAgICAgXCLmjInpkq7nmoTlsZ7mgKfor7TmmI7lpoLkuIvvvJpcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJ0YWJsZVwiLFxuICAgICAgW1xuICAgICAgICBcInRoZWFkXCIsXG4gICAgICAgIFtcbiAgICAgICAgICBcInRyXCIsXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0aFwiLFxuICAgICAgICAgICAgXCLlsZ7mgKdcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0aFwiLFxuICAgICAgICAgICAgXCLor7TmmI5cIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0aFwiLFxuICAgICAgICAgICAgXCLnsbvlnotcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0aFwiLFxuICAgICAgICAgICAgXCLpu5jorqTlgLxcIlxuICAgICAgICAgIF1cbiAgICAgICAgXVxuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgXCJ0Ym9keVwiLFxuICAgICAgICBbXG4gICAgICAgICAgXCJ0clwiLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgIFwidHJpZ2dlclwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcIuinpuWPkeS6i+S7tlwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcIlN0cmluZ1wiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcImNsaWNrXCJcbiAgICAgICAgICBdXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICBcInRyXCIsXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgXCJwbGFjZW1lbnRcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgXCLmsb3ms6HkvY3nva5cIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgXCJTdHJpbmdcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgXCLlj4LogINUcmlnZ2Vy57uE5Lu2XCJcbiAgICAgICAgICBdXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICBcInRyXCIsXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgXCJ0aXRsZVwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcIuagh+mimFwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcIlN0cmluZ1wiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCJcbiAgICAgICAgICBdXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICBcInRyXCIsXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCJcbiAgICAgICAgICBdLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgIFwi5YaF5a65XCJcbiAgICAgICAgICBdLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgIFwiU3RyaW5nXCJcbiAgICAgICAgICBdLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIFwidGRcIlxuICAgICAgICAgIF1cbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgIFwidHJcIixcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcInNob3dIZWFkZXJcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgXCLmmK/lkKbmmL7npLrmoIfpophcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgXCJCb29sZWFuXCJcbiAgICAgICAgICBdLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgIFwidHJ1ZVwiXG4gICAgICAgICAgXVxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgXCJ0clwiLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgIFwiYWx3YXlzU2hvd1wiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcIuaYr+WQpuS4gOebtOaYvuekulwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICBcIkJvb2xlYW5cIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgXCJmYWxzZVwiXG4gICAgICAgICAgXVxuICAgICAgICBdXG4gICAgICBdXG4gICAgXVxuICBdXG59O1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2NvbXBvbmVudHMvUG9wb3Zlci9pbmRleC5tZFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=